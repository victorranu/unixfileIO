#include <stdio.h>
#include <getopt.h>
#include <sys/utsname.h>
#include <time.h>
#include <sys/stat.h>
#include <strings.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <ar.h>

//GLOBAL VARIABLES
int maxMembers = 0;
char *archName = NULL;
char *memberArr[100];
#define MAX_READ 1000

//struct  ar_hdr               /* file member header */
//{
//    char    ar_name[16];	 /* '/' terminated file member name */
//    char    ar_date[12];	 /* file member date */
//    char    ar_uid[6]		 /* file member user identification */
//    char    ar_gid[6]		 /* file member group identification */
//    char    ar_mode[8]       /* file member mode (octal) */
//    char    ar_size[10];	 /* file member size */
//    char    ar_fmag[2];      /* header trailer string */
//};

void appendMember(int fd, int curMember){
    struct stat fileStats;
    int bytesRead = 0;
    int fdmember;   //file descriptor for reading member files
    char buffer[60];
    char fileBuffer[MAX_READ];
    char *membername = NULL;
    char name[16];

    membername = memberArr[curMember];
    int i;
    for (i = 0; i < strlen(membername); i++) {
        name[i] = membername[i];
    }
    name[i] = '/';
    name[i+1] = '\0';
    
    if (stat(membername, &fileStats) == -1) {
        printf("ERROR: unable to open %s\n", membername);
    }
    sprintf(buffer, "%-16s%-12ld%-6ld%-6ld%-8o%-10lld%c%c",name, (long)fileStats.st_mtime,(long)fileStats.st_uid, (long)fileStats.st_gid, fileStats.st_mode, (long long)fileStats.st_size,0x60,0xa);

    write(fd, buffer, sizeof(buffer));
    
    if (fileStats.st_size > MAX_READ) {
        printf("ERROR: %s size larger than %d bytes/n", membername, MAX_READ);
        return;
    }
    
    fdmember = open(membername, O_RDONLY, S_IRUSR | S_IWUSR);
    bytesRead = read(fdmember, fileBuffer, MAX_READ);
    close(fdmember);
    
    if (bytesRead != fileStats.st_size) {
        printf("ERROR: Did not read all bytes(%d of %d) in file %s/n",bytesRead, fileStats.st_size, membername);
    }
    
    write(fd, fileBuffer, bytesRead);
    
    if (bytesRead % 2 == 1) {   //for odd sized files, add an extra new line
        write(fd, "\n", 1);
    }
}

void appendMembers(int fd){
    int i;
    if (maxMembers == 0) {
        return;
    }
    for (i = 1; i <= maxMembers; i++) {
        appendMember(fd, i);
    }
}

void quickAppend(){
    char buffer[256];
    int fd;
    int curLoc;
    char *init = "!<arch>\n";
    
    fd = open(archName, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR);
    
    if (fd == -1) {
        printf("ERROR");
        return;
    }
    if (lseek(fd, 0, SEEK_END) == 0) {  //empty file
        curLoc = write(fd, "!<arch>\n", 8); //curLoc = 8 where the next byte will be written
        appendMembers(fd);
    }else if(lseek(fd, -1, SEEK_END) < 7){ //bad header
        printf("ERROR header < 60 bytes in file %s\n", archName);
    }else{  //good archive file
        curLoc = lseek(fd, 0, SEEK_END); //next byte after end of file
        appendMembers(fd);
    }
    
    //write(fd, init, sizeof(init));
    sprintf(buffer, "/bin/chmod 666 %s\n", archName);
    system(buffer);
}
void extract(){
    printf("x");
}



void conciseTOC(){
    int fd;
    int curLoc;
    char *init = "!<arch>\n";
    int bytesRead;
    int memberOffset = 0;
    char *memberName[16];
    struct ar_hdr memberHdr;
    
    fd = open(archName, O_RDONLY, S_IRUSR | S_IWUSR);
    
    if (fd == -1) {
        printf("ERROR: while opening %s\n", archName);
        return;
    }
    
    char buf[SARMAG];       //Size Of Magic String, ARMAG, In Ar Archive
    bytesRead = read(fd, buf, SARMAG);
    if (bytesRead != SARMAG || bcmp (buf, ARMAG, SARMAG)) {//compare buf and ARMAG strings
        printf("ERROR: Bad magic string. Expected: %8s, From Archive: %8s\n", ARMAG, buf);
    }
    memberOffset = SARMAG; //points to beginning of first member's header, end of ARMAG
    
    while (1) {//look at all the members 1 by 1
        if (lseek(fd, memberOffset, 0) < 0) {
            printf("ERROR: while lseeking");
            return;
        }
        
        bytesRead = read(fd, (char *) &memberHdr, sizeof(struct ar_hdr));
        if (bytesRead == 0) {
            break;//no data left, end of file. Its okay
        }
        if (bytesRead != sizeof(memberHdr) || bcmp(memberHdr.ar_fmag, ARFMAG, 2)) {//ARFMAG is the trailing string 'the apostrophe' and \n
            printf("ERROR: bad header at offset %d in %s\n", memberOffset, archName);
            return;
        }
        
        int i;
        for (i = 0; i < sizeof(memberHdr.ar_name); i++) {
            if (memberHdr.ar_name[i] != '/') {
                printf("%c", memberHdr.ar_name[i]);
            }else{
                printf("\n");
                break;
            }
        }
        memberOffset += sizeof(memberHdr) + atoi(memberHdr.ar_size);
        if (memberOffset %2 == 1) {
            memberOffset++;
        }
    }
    
    
}
void verboseTOC(){
    printf("v\n");
    int fd;
    int curLoc;
    char *init = "!<arch>\n";
    int bytesRead;
    int memberOffset = 0;
    char *memberName[16];
    struct ar_hdr memberHdr;
    
    fd = open(archName, O_RDONLY, S_IRUSR | S_IWUSR);
    
    if (fd == -1) {
        printf("ERROR: while opening %s\n", archName);
        return;
    }
    
    char buf[SARMAG];       //Size Of Magic String, ARMAG, In Ar Archive
    bytesRead = read(fd, buf, SARMAG);
    if (bytesRead != SARMAG || bcmp (buf, ARMAG, SARMAG)) {//compare buf and ARMAG strings
        printf("ERROR: Bad magic string. Expected: %8s, From Archive: %8s\n", ARMAG, buf);
    }
    memberOffset = SARMAG; //points to beginning of first member's header, end of ARMAG
    
    while (1) {//look at all the members 1 by 1
        if (lseek(fd, memberOffset, 0) < 0) {
            printf("ERROR: while lseeking");
            return;
        }
        
        bytesRead = read(fd, (char *) &memberHdr, sizeof(struct ar_hdr));
        if (bytesRead == 0) {
            break;//no data left, end of file. Its okay
        }
        if (bytesRead != sizeof(memberHdr) || bcmp(memberHdr.ar_fmag, ARFMAG, 2)) {//ARFMAG is the trailing string 'the apostrophe' and \n
            printf("ERROR: bad header at offset %d in %s\n", memberOffset, archName);
            return;
        }
        
        int i;
        for (i = 0; i < sizeof(memberHdr.ar_name); i++) {
            if (memberHdr.ar_name[i] != '/') {
                printf("%c", memberHdr.ar_name[i]);
            }else{
                printf("\n");
                break;
            }
        }
        memberOffset += sizeof(memberHdr) + atoi(memberHdr.ar_size);
        if (memberOffset %2 == 1) {
            memberOffset++;
        }
    }

    
}
void deleteFiles(){
    printf("d");
}
void quickAppendAll(){
    printf("A");
}
void addModified(){
    printf("w");
}


int main(int argc, char *argv[]){
    char c, c2;
    int opt = 0, i = 0;
    while((c = getopt(argc, argv, ":qxtvdAw" )) !=-1) {
        switch (c) {
            case 'q':
                c2 = 'q';
                break;
            case 'x':
                c2 = 'x';
                break;
            case 't':
                c2 = 't';
                break;
            case 'v':
                c2 = 'v';
                break;
            case 'd':
                c2 = 'd';
                break;
            case 'A':
                c2 = 'A';
                break;
            case 'w':
                c2 = 'w';
                break;
            case '?':
            default:
                printf("Unknown option, refer to man ar\n");
                return 1;
        }
    }
    
    if(optind < argc){
        archName = argv[optind];
    }else{
        printf("ERROR: No archive file specified.\n");
        return 1;
    }
    //read member files
    i = 1;
    while ((optind + i) <= argc) {
        memberArr[i] = argv[optind + i]; //memberArr[i] pointing to argv location w/filename
        i = i+1;
    }
    
    maxMembers = i-2;  //member counted one extra file, so I subtracted two **no points
    
//    printf("%d, %d\n", maxMembers, argc);
//    
//    for (i = 1; i <= maxMembers; i++) {
//        printf("Member Name: %d %s\n", i, memberArr[i]);
//    }
//    return 0;
    
    switch (c2) {
        case 'q':
            quickAppend();
            break;
        case 'x':
            extract();
            break;
        case 't':
            conciseTOC();
            break;
        case 'v':
            verboseTOC();
            break;
        case 'd':
            deleteFiles();
            break;
        case 'A':
            quickAppendAll();
            break;
        case 'w':
            addModified();
            break;
    }
    
    
    return 0;
}
